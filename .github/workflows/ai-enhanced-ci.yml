name: AI-Enhanced CI Pipeline

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [main, develop, dev]
  push:
    branches: [main, develop, dev]
  workflow_dispatch:
    inputs:
      ai_analysis:
        description: 'Run AI code analysis'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      v1_changed: ${{ steps.changes.outputs.v1_changed }}
      v2_changed: ${{ steps.changes.outputs.v2_changed }}
      docs_changed: ${{ steps.changes.outputs.docs_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changed paths
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          # Check for changes in each area
          echo "$CHANGED_FILES" | grep -q "^v1-legacy/" && echo "v1_changed=true" >> $GITHUB_OUTPUT || echo "v1_changed=false" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" | grep -q "^v2-gmail-label-manager/" && echo "v2_changed=true" >> $GITHUB_OUTPUT || echo "v2_changed=false" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" | grep -q "^docs/" && echo "docs_changed=true" >> $GITHUB_OUTPUT || echo "docs_changed=false" >> $GITHUB_OUTPUT

  ai-commit-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze commits with AI
        id: ai_analysis
        run: |
          # Extract commit messages
          COMMITS=$(git log --format="%H %s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          
          # Analyze commit patterns
          echo "## AI Commit Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for AI-generated commits
          if echo "$COMMITS" | grep -q -E "(claude|cursor|copilot|ai-generated)"; then
            echo "ü§ñ AI-generated commits detected" >> $GITHUB_STEP_SUMMARY
            echo "ai_generated=true" >> $GITHUB_OUTPUT
          fi
          
          # Analyze commit quality
          CONVENTIONAL_COUNT=$(echo "$COMMITS" | grep -cE "^[a-f0-9]+ (feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+" || true)
          TOTAL_COUNT=$(echo "$COMMITS" | wc -l)
          
          echo "üìä Conventional Commits: $CONVENTIONAL_COUNT/$TOTAL_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # Suggest version bump
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|feat.*!:"; then
            echo "version_bump=major" >> $GITHUB_OUTPUT
            echo "üî• Suggested version bump: **MAJOR**" >> $GITHUB_STEP_SUMMARY
          elif echo "$COMMITS" | grep -q "^[a-f0-9]+ feat"; then
            echo "version_bump=minor" >> $GITHUB_OUTPUT
            echo "‚ú® Suggested version bump: **MINOR**" >> $GITHUB_STEP_SUMMARY
          else
            echo "version_bump=patch" >> $GITHUB_OUTPUT
            echo "üîß Suggested version bump: **PATCH**" >> $GITHUB_STEP_SUMMARY
          fi

  quality-v1:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.v1_changed == 'true' || github.event_name == 'push'
    defaults:
      run:
        working-directory: v1-legacy
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: v1-legacy/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint check
        run: npm run lint:check
      
      - name: Format check
        run: npm run format:check
      
      - name: Build extension
        run: npm run build:ci
      
      - name: Validate extension
        run: npm run validate:extension
      
      - name: Upload v1 build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: v1-extension-build-${{ github.sha }}
          path: v1-legacy/dist/
          retention-days: 7

  quality-v2:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.v2_changed == 'true' || github.event_name == 'push'
    defaults:
      run:
        working-directory: v2-gmail-label-manager
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: v2-gmail-label-manager/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: TypeScript check
        run: npx tsc --noEmit
      
      - name: Build extension
        run: npm run build
      
      - name: Check bundle size
        run: |
          SIZE=$(du -sb dist | cut -f1)
          SIZE_MB=$((SIZE / 1048576))
          echo "Bundle size: ${SIZE_MB}MB"
          
          if [ $SIZE_MB -gt 1 ]; then
            echo "‚ö†Ô∏è Warning: Bundle size exceeds 1MB (${SIZE_MB}MB)"
          fi
          
          echo "üì¶ Bundle size: ${SIZE_MB}MB" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload v2 build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: v2-extension-build-${{ github.sha }}
          path: v2-gmail-label-manager/.output/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: Check for hardcoded credentials
        run: |
          echo "üîç Checking for hardcoded credentials..."
          
          # Define patterns to search for
          PATTERNS=(
            "GOCSPX-"
            "AIza"
            "client_secret"
            "api_key.*=.*['\"]"
            "password.*=.*['\"]"
          )
          
          FOUND_ISSUES=false
          
          for pattern in "${PATTERNS[@]}"; do
            if grep -r "$pattern" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --exclude-dir=node_modules . 2>/dev/null; then
              echo "‚ùå Found potential credential: $pattern"
              FOUND_ISSUES=true
            fi
          done
          
          if [ "$FOUND_ISSUES" = true ]; then
            echo "‚ö†Ô∏è Potential credentials found in code"
            exit 1
          else
            echo "‚úÖ No hardcoded credentials detected"
          fi

  ai-code-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate AI code review summary
        id: review
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Count changes by type
          JS_FILES=$(echo "$CHANGED_FILES" | grep -cE "\.(js|jsx|ts|tsx)$" || true)
          CSS_FILES=$(echo "$CHANGED_FILES" | grep -cE "\.(css|scss|sass)$" || true)
          CONFIG_FILES=$(echo "$CHANGED_FILES" | grep -cE "\.(json|yml|yaml|toml)$" || true)
          
          # Create review summary
          cat << EOF > review_summary.md
          ## ü§ñ AI Code Review Summary
          
          ### üìä Change Statistics
          - **JavaScript/TypeScript files**: $JS_FILES
          - **Style files**: $CSS_FILES
          - **Config files**: $CONFIG_FILES
          
          ### üéØ Review Focus Areas
          EOF
          
          # Add specific checks based on file types
          if [ $JS_FILES -gt 0 ]; then
            echo "- ‚úÖ Chrome Extension API usage" >> review_summary.md
            echo "- ‚úÖ Gmail API integration" >> review_summary.md
            echo "- ‚úÖ TypeScript type safety" >> review_summary.md
          fi
          
          if [ $CSS_FILES -gt 0 ]; then
            echo "- ‚úÖ Tailwind CSS best practices" >> review_summary.md
            echo "- ‚úÖ Responsive design" >> review_summary.md
          fi
          
          # Check for common issues
          echo "" >> review_summary.md
          echo "### üîç Automated Checks" >> review_summary.md
          
          # Check for console.log statements
          if git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "console.log"; then
            echo "- ‚ö†Ô∏è Found console.log statements - consider removing for production" >> review_summary.md
          else
            echo "- ‚úÖ No console.log statements" >> review_summary.md
          fi
          
          # Check for TODO comments
          if git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "TODO\|FIXME"; then
            echo "- üìù Found TODO/FIXME comments - consider addressing or creating issues" >> review_summary.md
          else
            echo "- ‚úÖ No TODO/FIXME comments" >> review_summary.md
          fi
          
          # Add recommendation
          echo "" >> review_summary.md
          echo "### üí° Recommendations" >> review_summary.md
          echo "1. Ensure all Chrome Extension permissions are justified" >> review_summary.md
          echo "2. Verify Gmail API rate limits are respected" >> review_summary.md
          echo "3. Test in both Chrome and Edge browsers" >> review_summary.md
          
          # Output summary
          cat review_summary.md >> $GITHUB_STEP_SUMMARY
      
      - name: Comment PR with review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reviewContent = fs.readFileSync('review_summary.md', 'utf8');
            
            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('AI Code Review Summary')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: reviewContent
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reviewContent
              });
            }

  commit-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install commitlint
        run: npm install -g @commitlint/cli @commitlint/config-conventional
      
      - name: Validate commits
        run: |
          # Get all commits in PR
          COMMITS=$(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          
          FAILED=false
          for commit in $COMMITS; do
            MESSAGE=$(git log --format=%B -n 1 $commit)
            echo "Checking: $MESSAGE"
            
            if ! echo "$MESSAGE" | npx commitlint; then
              echo "‚ùå Invalid commit message: $MESSAGE"
              FAILED=true
            fi
          done
          
          if [ "$FAILED" = true ]; then
            echo "‚ö†Ô∏è Some commits don't follow conventional format"
            echo "Please use: feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert"
            exit 1
          fi

  documentation-check:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.docs_changed == 'true' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Check documentation
        run: |
          echo "## üìö Documentation Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for required documentation files
          REQUIRED_DOCS=(
            "README.md"
            "CHANGELOG.md"
            "CLAUDE.md"
          )
          
          for doc in "${REQUIRED_DOCS[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úÖ $doc exists" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è $doc is missing" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Check documentation freshness
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìÖ Documentation Freshness" >> $GITHUB_STEP_SUMMARY
          
          for doc in $(find docs -name "*.md" -type f); do
            LAST_MODIFIED=$(git log -1 --format="%ar" -- "$doc")
            echo "- $doc: last updated $LAST_MODIFIED" >> $GITHUB_STEP_SUMMARY
          done

  summary:
    runs-on: ubuntu-latest
    needs: [quality-v1, quality-v2, security-scan, ai-code-review, commit-validation]
    if: always()
    steps:
      - name: Generate CI summary
        run: |
          echo "# üéØ CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üìä Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [ "${{ needs.quality-v1.result }}" == "success" ] || [ "${{ needs.quality-v1.result }}" == "skipped" ]; then
            echo "| Quality v1 | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Quality v1 | ‚ùå |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.quality-v2.result }}" == "success" ] || [ "${{ needs.quality-v2.result }}" == "skipped" ]; then
            echo "| Quality v2 | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Quality v2 | ‚ùå |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "| Security | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security | ‚ùå |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.ai-code-review.result }}" == "success" ] || [ "${{ needs.ai-code-review.result }}" == "skipped" ]; then
            echo "| AI Review | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| AI Review | ‚ùå |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.commit-validation.result }}" == "success" ] || [ "${{ needs.commit-validation.result }}" == "skipped" ]; then
            echo "| Commits | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Commits | ‚ùå |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Generated at $(date -u +"%Y-%m-%d %H:%M:%S UTC")_" >> $GITHUB_STEP_SUMMARY